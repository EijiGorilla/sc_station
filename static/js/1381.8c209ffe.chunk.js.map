{"version":3,"file":"static/js/1381.8c209ffe.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/select/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/select/select.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/select/select.scss?tag=calcite-select&encapsulation=shadow"],"sourcesContent":["export const CSS = {\n  icon: \"icon\",\n  iconContainer: \"icon-container\",\n  select: \"select\",\n  wrapper: \"wrapper\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { focusElement } from \"../../utils/dom\";\nimport {\n  afterConnectDefaultValueSet,\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n} from \"../../utils/form\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLabel, disconnectLabel, LabelableComponent, getLabelText } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale, Status, Width } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { getIconScale } from \"../../utils/component\";\nimport { Validation } from \"../functional/Validation\";\n\ntype OptionOrGroup = HTMLCalciteOptionElement | HTMLCalciteOptionGroupElement;\ntype NativeOptionOrGroup = HTMLOptionElement | HTMLOptGroupElement;\n\nfunction isOption(optionOrGroup: OptionOrGroup): optionOrGroup is HTMLCalciteOptionElement {\n  return optionOrGroup.tagName === \"CALCITE-OPTION\";\n}\n\nfunction isOptionGroup(\n  optionOrGroup: OptionOrGroup,\n): optionOrGroup is HTMLCalciteOptionGroupElement {\n  return optionOrGroup.tagName === \"CALCITE-OPTION-GROUP\";\n}\n\n/**\n * @slot - A slot for adding `calcite-option`s.\n */\n@Component({\n  tag: \"calcite-select\",\n  styleUrl: \"select.scss\",\n  shadow: true,\n})\nexport class Select\n  implements LabelableComponent, FormComponent, InteractiveComponent, LoadableComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true }) form: string;\n\n  /**\n   * Accessible name for the component.\n   *\n   */\n  @Prop() label!: string;\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: string | boolean;\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /** The component's `selectedOption` value. */\n  @Prop({ mutable: true }) value: string = null;\n\n  @Watch(\"value\")\n  valueHandler(value: string): void {\n    const items = this.el.querySelectorAll(\"calcite-option\");\n    items.forEach((item) => (item.selected = item.value === value));\n  }\n\n  /**\n   * The component's selected option `HTMLElement`.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedOption: HTMLCalciteOptionElement;\n\n  @Watch(\"selectedOption\")\n  selectedOptionHandler(selectedOption: HTMLCalciteOptionElement): void {\n    this.value = selectedOption?.value;\n  }\n\n  /**\n   * Specifies the width of the component.\n   */\n  @Prop({ reflect: true }) width: Width = \"auto\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSelectElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  formEl: HTMLFormElement;\n\n  defaultValue: Select[\"value\"];\n\n  private componentToNativeEl = new Map<OptionOrGroup, NativeOptionOrGroup>();\n\n  private mutationObserver = createObserver(\"mutation\", () => this.populateInternalSelect());\n\n  private selectEl: HTMLSelectElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    const { el } = this;\n\n    this.mutationObserver?.observe(el, {\n      subtree: true,\n      childList: true,\n    });\n\n    connectInteractive(this);\n    connectLabel(this);\n    connectForm(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n    disconnectInteractive(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    afterConnectDefaultValueSet(this, this.selectedOption?.value ?? \"\");\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    focusElement(this.selectEl);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Fires when the `selectedOption` changes.\n   */\n  @Event({ cancelable: false }) calciteSelectChange: EventEmitter<void>;\n\n  private handleInternalSelectChange = (): void => {\n    const selected = this.selectEl.selectedOptions[0];\n    this.selectFromNativeOption(selected);\n    requestAnimationFrame(() => this.emitChangeEvent());\n  };\n\n  @Listen(\"calciteInternalOptionChange\")\n  @Listen(\"calciteInternalOptionGroupChange\")\n  protected handleOptionOrGroupChange(event: CustomEvent): void {\n    event.stopPropagation();\n\n    const optionOrGroup = event.target as OptionOrGroup;\n    const nativeEl = this.componentToNativeEl.get(optionOrGroup);\n\n    if (!nativeEl) {\n      return;\n    }\n\n    this.updateNativeElement(optionOrGroup, nativeEl);\n\n    if (isOption(optionOrGroup) && optionOrGroup.selected) {\n      this.deselectAllExcept(optionOrGroup);\n      this.selectedOption = optionOrGroup;\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private updateNativeElement(\n    optionOrGroup: OptionOrGroup,\n    nativeOptionOrGroup: NativeOptionOrGroup,\n  ): void {\n    nativeOptionOrGroup.disabled = optionOrGroup.disabled;\n    nativeOptionOrGroup.label = optionOrGroup.label;\n\n    if (isOption(optionOrGroup)) {\n      const option = nativeOptionOrGroup as HTMLOptionElement;\n      option.selected = optionOrGroup.selected;\n      option.value = optionOrGroup.value;\n\n      // need to set innerText for mobile\n      // see https://stackoverflow.com/questions/35021620/ios-safari-not-showing-all-options-for-select-menu/41749701\n      option.innerText = optionOrGroup.label;\n    }\n  }\n\n  private populateInternalSelect = (): void => {\n    const optionsAndGroups = Array.from(\n      this.el.children as HTMLCollectionOf<OptionOrGroup | HTMLSlotElement>,\n    ).filter(\n      (child) => child.tagName === \"CALCITE-OPTION\" || child.tagName === \"CALCITE-OPTION-GROUP\",\n    ) as OptionOrGroup[];\n\n    this.clearInternalSelect();\n\n    optionsAndGroups.forEach(\n      (optionOrGroup) => this.selectEl?.append(this.toNativeElement(optionOrGroup)),\n    );\n  };\n\n  private clearInternalSelect(): void {\n    this.componentToNativeEl.forEach((value) => value.remove());\n    this.componentToNativeEl.clear();\n  }\n\n  private storeSelectRef = (node: HTMLSelectElement): void => {\n    this.selectEl = node;\n    this.populateInternalSelect();\n\n    const selected = this.selectEl.selectedOptions[0];\n    this.selectFromNativeOption(selected);\n  };\n\n  private selectFromNativeOption(nativeOption: HTMLOptionElement): void {\n    if (!nativeOption) {\n      return;\n    }\n\n    let futureSelected: HTMLCalciteOptionElement;\n\n    this.componentToNativeEl.forEach((nativeOptionOrGroup, optionOrGroup) => {\n      if (isOption(optionOrGroup) && nativeOptionOrGroup === nativeOption) {\n        optionOrGroup.selected = true;\n        futureSelected = optionOrGroup;\n        this.deselectAllExcept(optionOrGroup as HTMLCalciteOptionElement);\n      }\n    });\n\n    if (futureSelected) {\n      this.selectedOption = futureSelected;\n    }\n  }\n\n  private toNativeElement(\n    optionOrGroup: HTMLCalciteOptionElement | HTMLCalciteOptionGroupElement,\n  ): NativeOptionOrGroup {\n    if (isOption(optionOrGroup)) {\n      const option = document.createElement(\"option\");\n      this.updateNativeElement(optionOrGroup, option);\n      this.componentToNativeEl.set(optionOrGroup, option);\n\n      return option;\n    }\n\n    if (isOptionGroup(optionOrGroup)) {\n      const group = document.createElement(\"optgroup\");\n      this.updateNativeElement(optionOrGroup, group);\n\n      Array.from(optionOrGroup.children as HTMLCollectionOf<HTMLCalciteOptionElement>).forEach(\n        (option) => {\n          const nativeOption = this.toNativeElement(option);\n          group.append(nativeOption);\n          this.componentToNativeEl.set(optionOrGroup, nativeOption);\n        },\n      );\n\n      this.componentToNativeEl.set(optionOrGroup, group);\n\n      return group;\n    }\n\n    throw new Error(\"unsupported element child provided\");\n  }\n\n  private deselectAllExcept(except: HTMLCalciteOptionElement): void {\n    this.el.querySelectorAll<HTMLCalciteOptionElement>(\"calcite-option\").forEach((option) => {\n      if (option === except) {\n        return;\n      }\n\n      option.selected = false;\n    });\n  }\n\n  private emitChangeEvent = (): void => {\n    this.calciteSelectChange.emit();\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  renderChevron(): VNode {\n    return (\n      <div class={CSS.iconContainer}>\n        <calcite-icon class={CSS.icon} icon=\"chevron-down\" scale={getIconScale(this.scale)} />\n      </div>\n    );\n  }\n\n  render(): VNode {\n    const { disabled } = this;\n\n    return (\n      <Host>\n        <InteractiveContainer disabled={disabled}>\n          <div class={CSS.wrapper}>\n            <select\n              aria-label={getLabelText(this)}\n              class={CSS.select}\n              disabled={disabled}\n              onChange={this.handleInternalSelectChange}\n              // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)\n              ref={this.storeSelectRef}\n            >\n              <slot />\n            </select>\n            {this.renderChevron()}\n            <HiddenFormInputSlot component={this} />\n          </div>\n          {this.validationMessage && this.status === \"invalid\" ? (\n            <Validation\n              icon={this.validationIcon}\n              message={this.validationMessage}\n              scale={this.scale}\n              status={this.status}\n            />\n          ) : null}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-select-font-size: The font size of `calcite-option`s in the component.\n * @prop --calcite-select-spacing: The padding around the selected option text.\n */\n\n:host {\n  @extend %component-spacing;\n  @apply flex flex-col;\n}\n\n.wrapper {\n  @apply relative flex items-stretch;\n  inline-size: var(--select-width);\n}\n\n@include disabled();\n\n:host([scale=\"s\"]) {\n  --calcite-select-font-size: theme(\"fontSize.n2h\");\n  --calcite-select-spacing-inline: theme(\"spacing.2\") theme(\"spacing.8\");\n\n  .wrapper {\n    @apply h-6;\n  }\n\n  .icon-container {\n    @apply px-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-select-font-size: theme(\"fontSize.n1h\");\n  --calcite-select-spacing-inline: theme(\"spacing.3\") theme(\"spacing.10\");\n\n  .wrapper {\n    @apply h-8;\n  }\n\n  .icon-container {\n    @apply px-3;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-select-font-size: theme(\"fontSize.0h\");\n  --calcite-select-spacing-inline: theme(\"spacing.4\") theme(\"spacing.12\");\n\n  .wrapper {\n    block-size: 44px;\n  }\n\n  .icon-container {\n    @apply px-4;\n  }\n}\n\n:host([width=\"auto\"]) {\n  @apply w-auto;\n}\n\n:host([width=\"half\"]) {\n  @apply w-1/2;\n}\n\n:host([width=\"full\"]) {\n  @apply w-full;\n}\n\n.select {\n  @apply bg-foreground-1 border-color-input text-color-2 font-inherit focus-base m-0 box-border w-full cursor-pointer appearance-none truncate rounded-none border border-solid;\n  font-size: var(--calcite-select-font-size);\n  padding-inline: var(--calcite-select-spacing-inline);\n  border-inline-end-width: theme(\"borderWidth.0\");\n\n  &:focus {\n    @apply focus-inset;\n  }\n\n  &:hover {\n    @apply bg-foreground-2;\n  }\n}\n\n// override user agent stylesheet disabled styling\nselect:disabled {\n  @apply border-color-input bg-opacity-100;\n}\n\n.icon-container {\n  @apply border-color-input text-color-2 pointer-events-none absolute inset-y-0 flex items-center border-0 border-solid bg-transparent;\n  inset-inline-end: theme(\"inset.0\");\n  border-inline-width: theme(\"borderWidth.0\") theme(\"borderWidth.DEFAULT\");\n}\n\n:host([status=\"invalid\"]) {\n  select,\n  .icon-container {\n    @apply border-color-danger;\n  }\n\n  select:focus,\n  .icon-container:focus {\n    @apply focus-inset-danger;\n  }\n}\n\n.select:focus ~ .icon-container {\n  @apply border-color-transparent;\n}\n\n@include form-validation-message();\n@include hidden-form-input();\n@include base-component();\n"],"names":["CSS","isOption","optionOrGroup","tagName","Select","proxyCustomElement","HTMLElement","componentToNativeEl","Map","mutationObserver","createObserver","this","populateInternalSelect","handleInternalSelectChange","selected","selectEl","selectedOptions","selectFromNativeOption","requestAnimationFrame","emitChangeEvent","optionsAndGroups","Array","from","el","children","filter","child","clearInternalSelect","forEach","_this$selectEl","append","toNativeElement","storeSelectRef","node","calciteSelectChange","emit","valueHandler","value","querySelectorAll","item","selectedOptionHandler","selectedOption","connectedCallback","_this$mutationObserve","observe","subtree","childList","connectInteractive","connectLabel","connectForm","disconnectedCallback","_this$mutationObserve2","disconnect","disconnectInteractive","disconnectLabel","disconnectForm","componentWillLoad","setUpLoadableComponent","componentDidLoad","_this$selectedOption$","_this$selectedOption","setComponentLoaded","afterConnectDefaultValueSet","componentDidRender","updateHostInteraction","setFocus","componentFocusable","focusElement","handleOptionOrGroupChange","event","stopPropagation","target","nativeEl","get","updateNativeElement","deselectAllExcept","onLabelClick","nativeOptionOrGroup","disabled","label","option","innerText","remove","clear","nativeOption","futureSelected","document","createElement","set","isOptionGroup","group","Error","except","renderChevron","h","class","icon","scale","getIconScale","render","Host","InteractiveContainer","getLabelText","onChange","ref","HiddenFormInputSlot","component","validationMessage","status","Validation","validationIcon","message"],"sourceRoot":""}